#!/usr/bin/env zsh

# utility functions
LIGHT_CYAN='\033[1;36m'
LIGHT_GREEN='\033[1;32m'
NO_COLOR='\033[0m'
RED='\033[0;31m'
YELLOW='\033[1;33m'

cyan() {
  printf "${LIGHT_CYAN}%s${NO_COLOR}" "$1"
}

green() {
  printf "${LIGHT_GREEN}%s${NO_COLOR}" "$1"
}

red() {
  printf "${RED}%s${NO_COLOR}" "$1"
}

yellow() {
  printf "${YELLOW}%s${NO_COLOR}" "$1"
}

error() {
  printf "$(red '[ERROR]') %s\n" "$1"
}

info() {
  printf "$(cyan '[INFO]') %s\n" "$1"
}

success() {
  printf "$(green '[SUCCESS]') %s\n" "$1"
}

warn() {
  printf "$(yellow '[WARN]') %s\n" "$1"
}

is_non_zero_string() {
  ! test -z "${1}"
}

is_file() {
  is_non_zero_string "${1}" && test -f "${1}"
}

is_executable() {
  is_file "${1}" && test -e "${1}"
}

is_directory() {
  is_non_zero_string "${1}" && test -d "${1}"
}

is_git_repo() {
  is_directory "${1}" && test -d "${1}/.git"
}

load_file_if_exists() {
  is_executable "${1}" && source "${1}" || true
}

delete_directory_if_exists() {
  is_directory "${1}" && warn "$(red 'Deleting') ${1}" && sudo rm -rf "${1}"
}

command_exists() {
  type "${1}" &> /dev/null 2>&1
}

load_zsh_configs() {
  command_exists omz && omz reload && return

  file_list=('.zshenv' '.zprofile' '.zshrc')
  for file in "${file_list[@]}"; do
    load_file_if_exists "${HOME}/${file}"
  done
}

is_macos() {
  [[ "${OSTYPE}" =~ 'darwin' ]]
}

is_linux() {
  [[ "${OSTYPE}" =~ 'Linux' ]]
}

is_windows() {
  [[ "${OSTYPE}" =~ 'MINGW' ]]
}

if is_macos; then
  reinstall_xcode() {
    delete_directory_if_exists "/Applications/Xcode.app"

    xcode-select --install
    sudo xcodebuild -license accept || true
  }

  reinstall_xcode_cmdline_tools() {
    delete_directory_if_exists "/Library/Developer/CommandLineTools"

    touch /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
    softwareupdate -ia
    rm /tmp/.com.apple.dt.CommandLineTools.installondemand.in-progress
  }
fi
