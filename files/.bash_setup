#!/usr/bin/env bash

# Load helper functions
type command_exists &> /dev/null 2>&1 || source "${HOME}/.shellrc"

SKIP_CONFIRMATION=${SKIP_CONFIRMATION:-false}
INSTALL_JQ=${INSTALL_JQ:-true}
INSTALL_GIT_DELTA=${INSTALL_GIT_DELTA:-true}
INSTALL_ZOXIDE=${INSTALL_ZOXIDE:-true}
INSTALL_K3S=${INSTALL_K3S:-true}
INSTALL_HELM=${INSTALL_HELM:-true}

ARCH=$(dpkg --print-architecture)
OS_TYPE=$(uname | tr '[:upper:]' '[:lower:]')
CPU_ARCH=$(uname -m)

# Prompt user unless skipping confirmation
confirm_action() {
  local prompt="$1"
  if [[ "$SKIP_CONFIRMATION" == true ]]; then
    return 0
  fi
  read -rp "$prompt [y/N]: " confirm
  [[ "$confirm" =~ ^[Yy]$ ]]
}

download_and_install_tar_binary() {
  local url="$1"
  local binary_name="$2"
  local install_path="$3"
  local strip_components="$4"

  local tmpdir
  tmpdir=$(mktemp -d)
  trap 'rm -rf "$tmpdir"' RETURN
  local tarfile="$tmpdir/archive.tar.gz"

  info "‚¨áÔ∏è Downloading $binary_name from $url..."
  curl -fsSL "$url" -o "$tarfile" || { error "‚ùå Failed to download $binary_name"; return 1; }

  info "üì¶ Extracting $binary_name..."
  tar -xf "$tarfile" --strip-components="$strip_components" -C "$tmpdir" || { error "‚ùå Failed to extract $binary_name tarfile"; return 1; }

  local extracted_binary="$tmpdir/$binary_name"
  if [[ ! -f "$extracted_binary" ]]; then
    error "‚ùå $binary_name not found in extracted contents"
    return 1
  fi

  info "üöö Installing $binary_name to $install_path"
  cp "$extracted_binary" "$install_path"
  chmod +x "$install_path"
  success "‚úÖ $binary_name installed at $install_path"
}

dep_update() {
  manage_apt_packages
  install_or_update_jq
  install_or_update_git_delta
  install_or_update_zoxide
  install_or_update_k3s
  install_or_update_helm
}

manage_apt_packages() {
  info "üì¶ Checking for APT updates and installing from .packages"

  info "üîç Updating package list..."
  sudo apt-get update -qq

  info "üìã Checking for upgradable packages..."
  UPGRADABLE=$(apt list --upgradable 2>/dev/null | grep -v "Listing" || true)

  if is_non_zero_string "$UPGRADABLE"; then
    info "üîÑ Upgradable packages detected:"
    echo "$UPGRADABLE" | awk '{print "  ‚¨ÜÔ∏è " $1}'
    if confirm_action "‚ö†Ô∏è  Do you want to upgrade all packages?"; then
      sudo apt-get upgrade -y
    else
      warn "‚è≠Ô∏è  Skipped upgrade"
    fi
  else
    success "‚úÖ All packages are up to date"
  fi

  if is_file "${HOME}/.packages"; then
    info "üì¶ Ensuring required packages from .packages are installed..."
    xargs -a "${HOME}/.packages" sudo apt-get install -y -q
  else
    warn "‚ö†Ô∏è  No .packages file found at ${HOME}/.packages"
  fi
}

install_or_update_jq() {
  [[ "$INSTALL_JQ" != true ]] && warn "‚ö†Ô∏è  Skipping jq installation (INSTALL_JQ=$INSTALL_JQ)" && return

  LATEST=$(curl -fsSL https://api.github.com/repos/jqlang/jq/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  [[ -z "$LATEST" ]] && error "‚ùå Failed to fetch latest jq version" && return

  if command_exists jq; then
    CURRENT=$(jq --version)
    if [[ "$CURRENT" == "$LATEST" ]]; then
      success "‚úÖ jq is up to date ($CURRENT)"
      return
    else
      info "üîÑ Updating jq: $CURRENT ‚Üí $LATEST"
    fi
  else
    info "‚¨áÔ∏è Installing jq $LATEST"
  fi

  if confirm_action "‚ö†Ô∏è  Proceed to install/update jq $LATEST?"; then
    DEST="${HOME}/bin/jq"
    URL="https://github.com/jqlang/jq/releases/download/${LATEST}/jq-${OS_TYPE}-${ARCH}"
    curl -fsSL "$URL" -o "$DEST" || { error "‚ùå Failed to download jq binary"; return; }
    chmod +x "$DEST"
    success "‚úÖ jq is now at version $LATEST"
  else
    warn "‚è≠Ô∏è  Skipped jq install/update"
  fi
}

install_or_update_git_delta() {
  [[ "$INSTALL_GIT_DELTA" != true ]] && warn "‚ö†Ô∏è  Skipping git-delta installation (INSTALL_GIT_DELTA=$INSTALL_GIT_DELTA)" && return

  LATEST=$(curl -fsSL https://api.github.com/repos/dandavison/delta/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  [[ -z "$LATEST" ]] && error "‚ùå Failed to fetch latest git-delta version" && return

  if command_exists delta; then
    CURRENT=$(delta --version | awk '{print $2}')
    if [[ "$CURRENT" == "$LATEST" ]]; then
      success "‚úÖ git-delta is up to date ($CURRENT)"
      return
    else
      info "üîÑ Updating git-delta: $CURRENT ‚Üí $LATEST"
    fi
  else
    info "‚¨áÔ∏è Installing git-delta $LATEST"
  fi

  if confirm_action "‚ö†Ô∏è  Proceed to install/update git-delta $LATEST?"; then
    URL="https://github.com/dandavison/delta/releases/download/${LATEST}/delta-${LATEST}-${CPU_ARCH}-unknown-${OS_TYPE}-gnu.tar.gz"
    BINARY_NAME="delta"
    INSTALL_PATH="${HOME}/bin/delta"
    STRIP_COMPONENTS=1
    download_and_install_tar_binary "$URL" "$BINARY_NAME" "$INSTALL_PATH" "$STRIP_COMPONENTS"
  else
    warn "‚è≠Ô∏è  Skipped git-delta install/update"
  fi
}

install_or_update_zoxide() {
  [[ "$INSTALL_ZOXIDE" != true ]] && warn "‚ö†Ô∏è  Skipping zoxide installation (INSTALL_ZOXIDE=$INSTALL_ZOXIDE)" && return

  LATEST=$(curl -fsSL https://api.github.com/repos/ajeetdsouza/zoxide/releases/latest | grep '"tag_name":' | sed -E 's/.*"v?([^"]+)".*/\1/')
  [[ -z "$LATEST" ]] && error "‚ùå Failed to fetch latest zoxide version" && return

  if command_exists zoxide; then
    CURRENT=$(zoxide --version | awk '{print $2}')
    if [[ "$CURRENT" == "$LATEST" ]]; then
      success "‚úÖ zoxide is up to date ($CURRENT)"
      return
    else
      info "üîÑ Updating zoxide: $CURRENT ‚Üí $LATEST"
    fi
  else
    info "‚¨áÔ∏è Installing zoxide $LATEST"
  fi

  if confirm_action "‚ö†Ô∏è  Proceed to install/update zoxide $LATEST?"; then
    URL="https://github.com/ajeetdsouza/zoxide/releases/download/v${LATEST}/zoxide-${LATEST}-${CPU_ARCH}-unknown-${OS_TYPE}-musl.tar.gz"
    BINARY_NAME="zoxide"
    INSTALL_PATH="${HOME}/bin/zoxide"
    STRIP_COMPONENTS=0
    download_and_install_tar_binary "$URL" "$BINARY_NAME" "$INSTALL_PATH" "$STRIP_COMPONENTS"
  else
    warn "‚è≠Ô∏è  Skipped zoxide install/update"
  fi
}

install_or_update_k3s() {
  [[ "$INSTALL_K3S" != true ]] && warn "‚ö†Ô∏è  Skipping k3s installation (INSTALL_K3S=$INSTALL_K3S)" && return

  LATEST=$(curl -fsSL https://api.github.com/repos/k3s-io/k3s/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
  [[ -z "$LATEST" ]] && error "‚ùå Failed to fetch latest k3s version" && return

  if command_exists k3s; then
    CURRENT=$(k3s --version | head -n1 | awk '{print $3}')
    if [[ "$CURRENT" == "$LATEST" ]]; then
      success "‚úÖ k3s is up to date ($CURRENT)"
      return
    else
      info "üîÑ Updating k3s: $CURRENT ‚Üí $LATEST"
    fi
  else
    info "‚¨áÔ∏è Installing k3s $LATEST"
  fi

  if confirm_action "‚ö†Ô∏è  Proceed to install/update k3s $LATEST?"; then
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="$LATEST" K3S_KUBECONFIG_MODE=644 sh - || {
      error "‚ùå Failed to install/update k3s"
      return
    }
    success "‚úÖ k3s installed/updated to version $LATEST"
  else
    warn "‚è≠Ô∏è  Skipped k3s install/update"
  fi
}

install_or_update_helm() {
  [[ "$INSTALL_HELM" != true ]] && warn "‚ö†Ô∏è  Skipping helm installation (INSTALL_HELM=$INSTALL_HELM)" && return

  LATEST=$(curl -fsSL https://api.github.com/repos/helm/helm/releases/latest | grep '"tag_name":' | sed -E 's/.*"v?([^"]+)".*/\1/')
  [[ -z "$LATEST" ]] && error "‚ùå Failed to fetch latest helm version" && return

  if command_exists helm; then
    CURRENT=$(helm version --short --client | sed 's/v//g' | cut -d+ -f1)
    if [[ "$CURRENT" == "$LATEST" ]]; then
      success "‚úÖ Helm is up to date ($CURRENT)"
      return
    fi
    info "üîÑ Updating Helm: $CURRENT ‚Üí $LATEST"
  else
    info "‚¨áÔ∏è Installing helm $LATEST"
  fi

  if confirm_action "‚ö†Ô∏è  Proceed to install/update Helm $LATEST?"; then
    URL="https://get.helm.sh/helm-v${LATEST}-${OS_TYPE}-${ARCH}.tar.gz"
    BINARY_NAME="helm"
    INSTALL_PATH="${HOME}/bin/helm"
    STRIP_COMPONENTS=1
    download_and_install_tar_binary "$URL" "$BINARY_NAME" "$INSTALL_PATH" "$STRIP_COMPONENTS"
  else
    warn "‚è≠Ô∏è  Skipped Helm install/update"
  fi
}

