#!/usr/bin/env bash

# Load helper functions
type command_exists &> /dev/null 2>&1 || source "${HOME}/.shellrc"

SKIP_CONFIRMATION=${SKIP_CONFIRMATION:-false}
INSTALL_JQ=${INSTALL_JQ:-true}
INSTALL_GIT_DELTA=${INSTALL_GIT_DELTA:-true}
INSTALL_ZOXIDE=${INSTALL_ZOXIDE:-true}
INSTALL_K3S=${INSTALL_K3S:-true}
INSTALL_HELM=${INSTALL_HELM:-true}

ARCH=$(dpkg --print-architecture)
OS_TYPE=$(uname | tr '[:upper:]' '[:lower:]')
CPU_ARCH=$(uname -m)
INSTALL_PATH=${PERSONAL_BIN_DIR:-"${HOME}/bin"}

dep_update() {
  manage_apt_packages
  install_or_update_jq
  install_or_update_delta
  install_or_update_zoxide
  install_or_update_k3s
  install_or_update_helm
}

manage_apt_packages() {
  info "üì¶ Checking for APT updates and installing from .packages"

  info "üîç Updating package list..."
  sudo apt-get update -qq

  info "üìã Checking for upgradable packages..."
  UPGRADABLE=$(apt list --upgradable 2>/dev/null | grep -v "Listing" || true)

  if is_non_zero_string "$UPGRADABLE"; then
    info "üîÑ Upgradable packages detected:"
    echo "$UPGRADABLE" | awk '{print "  ‚¨ÜÔ∏è " $1}'
    if _confirm_action "‚ö†Ô∏è  Do you want to upgrade all packages?"; then
      sudo apt-get upgrade -y
    else
      warn "‚è≠Ô∏è  Skipped upgrade"
    fi
  else
    success "‚úÖ All packages are up to date"
  fi

  if is_file "${HOME}/.packages"; then
    info "üì¶ Ensuring required packages from .packages are installed..."
    xargs -a "${HOME}/.packages" sudo apt-get install -y -q
  else
    warn "‚ö†Ô∏è  No .packages file found at ${HOME}/.packages"
  fi
}

install_or_update_jq() {
  if ! _verify_binary_update "jq" INSTALL_JQ "jqlang/jq" "jq --version"; then
    return
  fi

  local latest="$BINARY_LATEST_VERSION"

  if _confirm_action "‚ö†Ô∏è  Proceed to install/update jq $latest?"; then
    destination="${HOME}/bin/jq"
    url="https://github.com/jqlang/jq/releases/download/${latest}/jq-${OS_TYPE}-${ARCH}"
    info "‚¨áÔ∏è Downloading jq from $url..."
    curl -fsSL "$url" -o "$destination" || { error "‚ùå Failed to download jq binary"; return; }
    chmod +x "$destination"
    success "‚úÖ jq is now at version $latest"
  else
    warn "‚è≠Ô∏è  Skipped jq install/update"
  fi
}

install_or_update_delta() {
  _install_or_update_binary_from_github \
    "delta" \
    INSTALL_GIT_DELTA \
    "dandavison/delta" \
    "delta --version | awk '{print \$2}'" \
    "https://github.com/dandavison/delta/releases/download/\${latest}/delta-\${latest}-${CPU_ARCH}-unknown-${OS_TYPE}-gnu.tar.gz" \
    1
}

install_or_update_zoxide() {
  _install_or_update_binary_from_github \
    "zoxide" \
    INSTALL_ZOXIDE \
    "ajeetdsouza/zoxide" \
    "zoxide --version | awk '{print \"v\"\$2}'" \
    "https://github.com/ajeetdsouza/zoxide/releases/download/\${latest}/zoxide-\$(echo \${latest} | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')-${CPU_ARCH}-unknown-${OS_TYPE}-musl.tar.gz" \
    0
}

install_or_update_k3s() {
  if ! _verify_binary_update "k3s" INSTALL_K3S "k3s-io/k3s" "k3s --version | head -n1 | awk '{print \$3}'"; then
    return
  fi

  local latest="$BINARY_LATEST_VERSION"

  if _confirm_action "‚ö†Ô∏è  Proceed to install/update k3s $latest?"; then
    curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="$latest" K3S_KUBECONFIG_MODE=644 sh -s - --disable traefik --disable servicelb || {
      error "‚ùå Failed to install/update k3s"
      return
    }
    success "‚úÖ k3s installed/updated to version $latest"
  else
    warn "‚è≠Ô∏è  Skipped k3s install/update"
  fi
}

install_or_update_helm() {
  _install_or_update_binary_from_github \
    "helm" \
    INSTALL_HELM \
    "helm/helm" \
    "helm version --short --client | cut -d+ -f1" \
    "https://get.helm.sh/helm-\${latest}-${OS_TYPE}-${ARCH}.tar.gz" \
    1
}

_confirm_action() {
  local prompt="$1"
  if [[ "$SKIP_CONFIRMATION" == true ]]; then
    return 0
  fi
  read -rp "$prompt [y/N]: " confirm
  [[ "$confirm" =~ ^[Yy]$ ]]
}

_verify_binary_update() {
  local binary_name="$1"
  local install_flag_name="$2"
  local install_flag_value="${!2}"
  local repo="$3"
  local current_version_fetch_cmd="$4"

  [[ "$install_flag_value" != true ]] && {
    warn "‚ö†Ô∏è  Skipping $binary_name installation (${install_flag_name}=${install_flag_value})"
    return 1
  }

  local latest
  latest=$(curl -fsSL "https://api.github.com/repos/${repo}/releases/latest" |
           grep -oE '"tag_name"\s*:\s*"[^"]+"' |
           sed -E 's/^"tag_name"\s*:\s*"([^"]+)"$/\1/' |
           grep -E '[0-9]+\.[0-9]+\.[0-9]+')

  [[ -z "$latest" ]] && {
    error "‚ùå Failed to fetch latest $binary_name version"
    return 1
  }

  if command_exists "$binary_name"; then
    local current
    current=$(eval "$current_version_fetch_cmd")
    if [[ "$current" == "$latest" ]]; then
      success "‚úÖ $binary_name is up to date ($current)"
      return 1
    else
      info "üîÑ Updating $binary_name: $current ‚Üí $latest"
    fi
  else
    info "‚¨áÔ∏è Installing $binary_name $latest"
  fi

  export BINARY_LATEST_VERSION="$latest"
  return 0
}

_install_or_update_binary_from_github() {
  local binary_name="$1"
  local install_flag_name="$2"
  local install_flag_value="${!2}"
  local repo="$3"
  local current_version_fetch_cmd="$4"
  local url_template="$5"
  local strip_component="$6"

  if ! _verify_binary_update "$binary_name" "$install_flag_name" "$repo" "$current_version_fetch_cmd"; then
    return
  fi

  local latest="$BINARY_LATEST_VERSION"

  if _confirm_action "‚ö†Ô∏è  Proceed to install/update $binary_name $latest?"; then
    local url
    url=$(eval "echo \"$url_template\"")
    _download_and_install_tar_binary "$url" "$binary_name" "$strip_component"
  else
    warn "‚è≠Ô∏è  Skipped $binary_name install/update"
  fi
}

_download_and_install_tar_binary() {
  local url="$1"
  local binary_name="$2"
  local strip_components="$3"
  local install_binary_path="${INSTALL_PATH}/${binary_name}"

  local tmpdir
  tmpdir=$(mktemp -d)
  trap 'rm -rf "$tmpdir"' RETURN
  local tarfile="$tmpdir/archive.tar.gz"

  info "‚¨áÔ∏è Downloading $binary_name from $url..."
  curl -fsSL "$url" -o "$tarfile" || { error "‚ùå Failed to download $binary_name"; return 1; }

  info "üì¶ Extracting $binary_name..."
  tar -xf "$tarfile" --strip-components="$strip_components" -C "$tmpdir" || { error "‚ùå Failed to extract $binary_name tarfile"; return 1; }

  local extracted_binary="$tmpdir/$binary_name"
  if [[ ! -f "$extracted_binary" ]]; then
    error "‚ùå $binary_name not found in extracted contents"
    return 1
  fi

  info "üöö Installing $binary_name to $install_binary_path"
  cp "$extracted_binary" "$install_binary_path"
  chmod +x "$install_binary_path"
  success "‚úÖ $binary_name installed at $install_binary_path"
}
